#! /usr/bin/python3
#
# Copyright (C) 2014 Alexis de Lattre <alexis _at_ via.ecp.fr>
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version. See http://www.gnu.org/licenses/gpl.html


import sys
import argparse
from wazo_provd_client import Client as ProvdClient
from wazo_auth_client import Client as AuthClient
from xivo.config_helper import parse_config_file


_CONFIG_AUTH = {
    'host': 'localhost',
    'port': 9497,
    'prefix': None,
    'https': False,
    'key_file': '/var/lib/wazo-auth-keys/wazo-provd-cli-key.yml',
}


def main(args):
    key_file = parse_config_file(_CONFIG_AUTH.pop('key_file'))
    aclient = AuthClient(
        username=key_file['service_id'],
        password=key_file['service_key'],
        **_CONFIG_AUTH)
    token_data = aclient.token.new(
        'wazo_user', expiration=3600, session_type='mobile')
    pclient = ProvdClient(
        host='localhost', verify_certificate=False, token=token_data['token'])
    pdevices = pclient.devices
    pplugins = pclient.plugins

    installed_plugins = list(pplugins.list()['plugins'].keys())
    print("Installed plugins : %s" % installed_plugins)

    if not args.list_plugins:
        print("The command requires one or more arguments")
        sys.exit(1)

    plugins_to_regen = []
    if (
            len(args.list_plugins) == 1 and
            args.list_plugins[0] and
            args.list_plugins[0].lower() == 'all'):
        plugins_to_regen = installed_plugins
    else:
        for arg in args.list_plugins:
            for iplugin in installed_plugins:
                if arg in iplugin:
                    plugins_to_regen.append(iplugin)

    print("Plugins to regenerate : %s" % plugins_to_regen)

    for plugin in plugins_to_regen:
        print("RECONFIGURE PLUGIN %s..." % plugin)
        devices = pdevices.list(
            {'plugin': plugin}, fields=['id'], recurse=True)['devices']
        for device in devices:
            device_id = device['id']
            pdevices.reconfigure(device_id)
            print('RECONFIGURE device %s' % device_id)
            if args.sync:
                print("SYNC device %s ... " % device_id)
                pdevices.synchronize(device_id)


if __name__ == '__main__':
    usage = "usage: wazo-provd-cmd [options] wazo-plugin1 wazo-plugin2 ..."
    epilog = "Script written by Alexis de Lattre. " \
        "Published under the GNU GPL licence."
    description = "This script updates the configuration files of one " \
        "or more provd plugins and can optionnaly resync them. " \
        "If you use 'xivo-provd-cmd all', it will resync all the devices " \
        "from all the plugins. If you use 'xivo-provd-cmd yealink', it " \
        "will resync the plugins that have 'yealink' in their name."
    parser = argparse.ArgumentParser(
        usage=usage, epilog=epilog, description=description)
    parser.add_argument(
        '-s', '--synchronize', dest='sync', action='store_true',
        help="Resync the devices.")
    parser.add_argument(
        "list_plugins", nargs='*', help="List of plugins")
    args = parser.parse_args()
    main(args)
